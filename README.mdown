# MarkLogic-Node Generator

This application was generated by the MarkLogic-Node [Slush](https://github.com/klei/slush) generator, with the following components:

- [AngularJS](https://angularjs.org/)
- [Gulp](http://gulpjs.com/)
- [node.js](http://nodejs.org/): very thin layer, hosting the Angular code and proxying MarkLogic REST API requests
- [Roxy Deployer](https://github.com/marklogic/roxy): bootstrap MarkLogic databases, application servers, etc; scaffolding for MarkLogic REST API service extensions

## Install Required Dependencies

- [node.js](http://nodejs.org/download/)
- [npm](https://www.npmjs.com/): Built-in package manager for node (comes with
  node, but check to be sure you have latest version: `npm install -g npm`)
- [gulp](http://gulpjs.com/): Javascript task automation (`npm install -g
  gulp`)
- [Bower](http://bower.io/): A package manager for front-end libraries (`npm
  install -g bower`)
- [Git](https://git-scm.com/) - Roxy depends on this version control system
- [Ruby](https://www.ruby-lang.org/en/documentation/installation/) - Roxy
  depends on Ruby in order to run server configuration scripts

# Running the application

    ./ml local bootstrap
    ./ml local deploy modules

On Windows, that would be:

    ml.bat local bootstrap
    ml.bat local deploy modules

Install dependencies using the node package manager:

    npm install

Install additional dependencies using the bower package manager:

    bower install

If you want to upload a dictionary for spell-suggestions:

    ./ml local deploy content

On Windows:

    ml.bat local deploy content

Edit `./local.json` to set your desired ports

    gulp serve-local # this will watch the .less file for changes, compile them to .css, and run the node server

# Installation and deployment on server

See etc/INSTALL.md

# Data

## Element and Product Data

An import script was created to load the sample data provided by Ascend Learning.
The import has a dependency on (MLCP)[https://docs.marklogic.com/guide/ingestion/content-pump]
which must be installed and the path must be set in the <deploy/local.properties>
file.

The sample data is not included in the repo and must be placed in 'content' folder
and be organized by 'elements' and 'products'.  Below is the sample directory
structure.

    /content/elements/*.xlsx
    /content/products/*.xlsx


The import script can be executed using the following command:

    ./import-data.sh

Or on Windows:

    TODO:  Create Windows import script.

## General Data Information


For <2008_2016_changes/2008_2016_elements.csv>:
  - Replaced ':' with '-'.
  - Replaced  with '  '.
  - Replaced  with ' '.

For <2008_2016_changes/2008_2016_products.csv>:
  - Replaced ': ' with '-'.  (Note the colon + space)


Using the "Cost calc" column in Element spreadsheets to determine cost for each element.


